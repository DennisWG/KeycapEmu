/*
    Copyright 2018-2019 KeycapEmu

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#include <generated/authentication.hpp>
#include <generated/realm_protocol.hpp>

#include "client_connection.hpp"
#include "player_session.hpp"

#include <keycap/root/network/memory_stream.hpp>
#include <keycap/root/network/service_locator.hpp>
#include <keycap/root/network/srp6/utility.hpp>
#include <keycap/root/utility/crc32.hpp>
#include <network/services.hpp>

namespace net = keycap::root::network;
namespace shared_net = keycap::shared::network;
namespace srp6 = keycap::root::network::srp6;
namespace util = keycap::root::utility;

namespace keycap::realmserver
{
    player_session::player_session(client_connection& connection, std::string const& account_name,
                                   shared::cryptography::packet_scrambler& scrambler)
      : connection_{connection}
      , scrambler_{scrambler}
    {
        protocol::request_account_id_from_name request;
        request.account_name = account_name;

        auto callback = [&](net::service_type sender, net::memory_stream data) {
            auto reply = protocol::reply_account_id::decode(data);

            account_id_ = reply.account_id;

            return true;
        };

        connection.query_account_service(request.encode(), callback);
    }

    void player_session::send(keycap::root::network::memory_stream&& stream)
    {
        scrambler_.encrypt(stream);
        connection_.send(stream);
    }

    uint32 player_session::account_id() const
    {
        return account_id_;
    }

    void player_session::send(keycap::root::network::memory_stream& stream)
    {
        scrambler_.encrypt(stream);
        connection_.send(stream);
    }

    void player_session::send_addon_info(keycap::protocol::client_addon_info const& client_addons)
    {
        constexpr std::array<uint8, 256> addon_public_key = {
            0xC3, 0x5B, 0x50, 0x84, 0xB9, 0x3E, 0x32, 0x42, 0x8C, 0xD0, 0xC7, 0x48, 0xFA, 0x0E, 0x5D, 0x54, 0x5A, 0xA3,
            0x0E, 0x14, 0xBA, 0x9E, 0x0D, 0xB9, 0x5D, 0x8B, 0xEE, 0xB6, 0x84, 0x93, 0x45, 0x75, 0xFF, 0x31, 0xFE, 0x2F,
            0x64, 0x3F, 0x3D, 0x6D, 0x07, 0xD9, 0x44, 0x9B, 0x40, 0x85, 0x59, 0x34, 0x4E, 0x10, 0xE1, 0xE7, 0x43, 0x69,
            0xEF, 0x7C, 0x16, 0xFC, 0xB4, 0xED, 0x1B, 0x95, 0x28, 0xA8, 0x23, 0x76, 0x51, 0x31, 0x57, 0x30, 0x2B, 0x79,
            0x08, 0x50, 0x10, 0x1C, 0x4A, 0x1A, 0x2C, 0xC8, 0x8B, 0x8F, 0x05, 0x2D, 0x22, 0x3D, 0xDB, 0x5A, 0x24, 0x7A,
            0x0F, 0x13, 0x50, 0x37, 0x8F, 0x5A, 0xCC, 0x9E, 0x04, 0x44, 0x0E, 0x87, 0x01, 0xD4, 0xA3, 0x15, 0x94, 0x16,
            0x34, 0xC6, 0xC2, 0xC3, 0xFB, 0x49, 0xFE, 0xE1, 0xF9, 0xDA, 0x8C, 0x50, 0x3C, 0xBE, 0x2C, 0xBB, 0x57, 0xED,
            0x46, 0xB9, 0xAD, 0x8B, 0xC6, 0xDF, 0x0E, 0xD6, 0x0F, 0xBE, 0x80, 0xB3, 0x8B, 0x1E, 0x77, 0xCF, 0xAD, 0x22,
            0xCF, 0xB7, 0x4B, 0xCF, 0xFB, 0xF0, 0x6B, 0x11, 0x45, 0x2D, 0x7A, 0x81, 0x18, 0xF2, 0x92, 0x7E, 0x98, 0x56,
            0x5D, 0x5E, 0x69, 0x72, 0x0A, 0x0D, 0x03, 0x0A, 0x85, 0xA2, 0x85, 0x9C, 0xCB, 0xFB, 0x56, 0x6E, 0x8F, 0x44,
            0xBB, 0x8F, 0x02, 0x22, 0x68, 0x63, 0x97, 0xBC, 0x85, 0xBA, 0xA8, 0xF7, 0xB5, 0x40, 0x68, 0x3C, 0x77, 0x86,
            0x6F, 0x4B, 0xD7, 0x88, 0xCA, 0x8A, 0xD7, 0xCE, 0x36, 0xF0, 0x45, 0x6E, 0xD5, 0x64, 0x79, 0x0F, 0x17, 0xFC,
            0x64, 0xDD, 0x10, 0x6F, 0xF3, 0xF5, 0xE0, 0xA6, 0xC3, 0xFB, 0x1B, 0x8C, 0x29, 0xEF, 0x8E, 0xE5, 0x34, 0xCB,
            0xD1, 0x2A, 0xCE, 0x79, 0xC3, 0x9A, 0x0D, 0x36, 0xEA, 0x01, 0xE0, 0xAA, 0x91, 0x20, 0x54, 0xF0, 0x72, 0xD8,
            0x1E, 0xC7, 0x89, 0xD2};
        auto public_crc = util::crc32(addon_public_key);

        keycap::protocol::server_addon_info answer;

        for (auto& addon : client_addons.addons)
        {
            keycap::protocol::server_addon_data data;

            data.unk1 = 2;
            data.has_key_data = true;
            data.key_data
                = keycap::protocol::key_data{std::string{addon_public_key.begin(), addon_public_key.end()}, public_crc};
            answer.addons.emplace_back(std::move(data));
        }

        send(answer.encode());
    }
}