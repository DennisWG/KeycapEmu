## if attrib/type == "string"
{##}
            auto size_{{ attrib/name }} = decoder.get<uint8>();
            packet.{{attrib/name}} = decoder.get_string(size_{{ attrib/name }});
## if attrib/hasAnnotations
## for annotation in attrib/annotations
## if annotation/name == "Expects"
{##}
            ensure("{{attrib/name}}", packet.{{attrib/name}}, "{{annotation/value}}");
## endif
## endfor
## endif
## else if attrib/hasSpecifier
## if hasSpecifier(attrib, "repeated")
{##}
            auto size_{{attrib/name}} = decoder.get<uint8>();
            for (int i = 0; i < size_{{attrib/name}}; ++i)
                packet.{{attrib/name}}.push_back(decoder.get<{{ attrib/type }}>());
## else if hasSpecifier(attrib, "optional")
{##}
            if (decoder.size() >= sizeof({{ attrib/type }}))
                packet.{{attrib/name}} = decoder.get<{{ attrib/type }}>();
## endif
## else if attrib/hasArraySize
{##}
            packet.{{attrib/name}} = decoder.get<{{ attrib/type }}, {{ attrib/arraySize }}>();
## else if not hasAnnotation(attrib, "IsSize")
{##}
            packet.{{attrib/name}} = decoder.get<{{ attrib/type }}>();
## endif
## if attrib/hasAnnotations
## for annotation in attrib/annotations
## if annotation/name == "Expects"
{##}
            ensure("{{attrib/name}}", packet.{{attrib/name}}, {{annotation/value}});

## else if annotation/name == "Reverse"
{##}
            std::reverse(std::begin(packet.{{attrib/name}}), std::end(packet.{{attrib/name}}));

## endif
## endfor
## endif